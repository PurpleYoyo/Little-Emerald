raw `
.set LOCALID_NURSE, 1

DewfordTown_PokemonCenter_1F_MapScripts::
	map_script MAP_SCRIPT_ON_TRANSITION, DewfordTown_PokemonCenter_1F_OnTransition
	map_script MAP_SCRIPT_ON_RESUME, CableClub_OnResume
	.byte 0

DewfordTown_PokemonCenter_1F_OnTransition:
	setrespawn HEAL_LOCATION_DEWFORD_TOWN
	call Common_EventScript_UpdateBrineyLocation
	end

DewfordTown_PokemonCenter_1F_EventScript_Nurse::
	setvar VAR_0x800B, LOCALID_NURSE
	call Common_EventScript_PkmnCenterNurse
	waitmessage
	waitbuttonpress
	release
	end

DewfordTown_PokemonCenter_1F_EventScript_PokefanF::
	msgbox DewfordTown_PokemonCenter_1F_Text_StoneCavern, MSGBOX_NPC
	end

DewfordTown_PokemonCenter_1F_EventScript_Man::
	msgbox DewfordTown_PokemonCenter_1F_Text_FaintedMonCanUseHM, MSGBOX_NPC
	end

DewfordTown_PokemonCenter_1F_Text_StoneCavern:
	.string "There's a stone cavern at the edge\n"
	.string "of town.\p"
	.string "I've heard you can find rare stones\n"
	.string "there.$"

DewfordTown_PokemonCenter_1F_Text_FaintedMonCanUseHM:
	.string "Even if a POKéMON faints and can't\n"
	.string "battle, it can still use a move learned\l"
	.string "from a HIDDEN MACHINE (HM).$" 	

`

script DewfordTown_PokemonCenter_1F_EventScript_NatureMintNurse {
	lock
	message(format("Would you like to make a Nature Mint with a Blank Nature Mint?"))
	yesnobox(8, 4)
	if (var(VAR_RESULT) == 0) { // No
		goto(End)
	}
	checkitem(ITEM_BLANK_MINT, 1)
	if (var(VAR_RESULT) != 1) { // No Blank Mints
		msgbox(format("You do not have any Blank Nature Mints."))
		goto(End)
	}
	msgbox(format("Which stat would you like the mint to increase?"))
	multichoicegrid(10, 4, MULTI_STAT_NAMES_NO_HP, 2, 0)
	if (var(VAR_RESULT) == 5) { // Exit
		goto(End)
	}
	elif (var(VAR_RESULT) == 0) {
		setvar(RAISE, 0)
	}
	elif (var(VAR_RESULT) == 1) {
		setvar(RAISE, 1)
	}
	elif (var(VAR_RESULT) == 2) {
		setvar(RAISE, 2)
	}
	elif (var(VAR_RESULT) == 3) {
		setvar(RAISE, 3)
	}
	elif (var(VAR_RESULT) == 4) {
		setvar(RAISE, 4)
	}
	msgbox(format("Which stat would you like the mint to decrease?"))
	multichoicegrid(8, 4, MULTI_STAT_NAMES_NO_HP, 2, 0)
	if (var(VAR_RESULT) == 5) { // Exit
		goto(End)
	}
	elif (var(VAR_RESULT) == 0) {
		setvar(LOWER, 0)
	}
	elif (var(VAR_RESULT) == 1) {
		setvar(LOWER, 1)
	}
	elif (var(VAR_RESULT) == 2) {
		setvar(LOWER, 2)
	}
	elif (var(VAR_RESULT) == 3) {
		setvar(LOWER, 3)
	}
	elif (var(VAR_RESULT) == 4) {
		setvar(LOWER, 4)
	}
	if (var(RAISE) == 0 && var(LOWER) == 0 
	    || var(RAISE) == 1 && var(LOWER) == 1
		|| var(RAISE) == 2 && var(LOWER) == 2
		|| var(RAISE) == 3 && var(LOWER) == 3
		|| var(RAISE) == 4 && var(LOWER) == 4) { // Neutral Mint
		message(format("Are you sure you want to make a Neutral Nature Mint?"))
	    yesnobox(5, 2)
		if (var(VAR_RESULT) == 1) {
			giveitem(ITEM_SERIOUS_MINT)
			removeitem(ITEM_BLANK_MINT, 1)
		}
	}
	switch (var(RAISE)) {
		case 0: // + Attack
			switch (var(LOWER)) {
				case 1: // - Defense, Lonely
					message(format("You would like to make a Lonely Nature Mint (+Atk -Def)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_LONELY_MINT) // this plays sfx and sends a message
					removeitem(ITEM_BLANK_MINT, 1)
				case 2: // - Special Attack, Adamant
					message(format("You would like to make an Adamant Nature Mint (+Atk -SpA)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_ADAMANT_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 3: // - Special Defense, Naughty
					message(format("You would like to make a Naughty Nature Mint (+Atk -SpD)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_NAUGHTY_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 4: // - Speed, Brave
					message(format("You would like to make a Brave Nature Mint (+Atk -Spe)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_BRAVE_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				default:
					goto(End)
			}
		case 1: // + Defense
			switch (var(LOWER)) {
				case 0: // - Attack, Bold
					message(format("You would like to make a Bold Nature Mint (+Def -Atk)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_BOLD_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 2: // - Special Attack, Impish
					message(format("You would like to make an Impish Nature Mint (+Def -SpA)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_IMPISH_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 3: // - Special Defense, Lax
					message(format("You would like to make a Lax Nature Mint (+Def -SpD)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_LAX_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 4: // - Speed, Relaxed
					message(format("You would like to make a Relaxed Nature Mint (+Def -Spe)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_RELAXED_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				default:
					goto(End)
			}
		case 2: // + Special Attack
			switch (var(LOWER)) {
				case 0: // - Attack, Modest
					message(format("You would like to make a Modest Nature Mint (+SpA -Atk)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_MODEST_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 1: // - Defense, Mild
					message(format("You would like to make a Mild Nature Mint (+SpA -Def)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_MILD_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 3: // - Special Defense, Rash
					message(format("You would like to make a Rash Nature Mint (+SpA -SpD)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_RASH_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 4: // - Speed, Quiet
					message(format("You would like to make a Quiet Nature Mint (+SpA -Spe)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_QUIET_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				default:
					goto(End)
			}
		case 3: // + Special Defense
			switch (var(LOWER)) {
				case 0: // - Attack, Calm
					message(format("You would like to make a Calm Nature Mint (+SpD -Atk)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_CALM_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 1: // - Defense, Gentle
					message(format("You would like to make a Gentle Nature Mint (+SpD -Def)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_GENTLE_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 2: // - Special Attack, Careful
					message(format("You would like to make a Careful Nature Mint (+SpD -SpA)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_CAREFUL_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 4: // - Speed, Sassy
					message(format("You would like to make a Sassy Nature Mint (+SpD -Spe)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_SASSY_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				default:
					goto(End)
			}
		case 4: // + Speed
			switch (var(LOWER)) {
				case 0: // - Attack, Timid
					message(format("You would like to make a Timid Nature Mint (+Spe -Atk)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_TIMID_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 1: // - Defense, Hasty
					message(format("You would like to make a Hasty Nature Mint (+Spe -Def)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_HASTY_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 2: // - Special Attack, Jolly
					message(format("You would like to make a Jolly Nature Mint (+Spe -SpA)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_JOLLY_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				case 3: // - Special Defense, Naive
					message(format("You would like to make a Naive Nature Mint (+Spe -SpD)?"))
	    	    	yesnobox(5, 2)
					if (var(VAR_RESULT) == 0) { // No
						goto(End)
					}
					giveitem(ITEM_NAIVE_MINT)
					removeitem(ITEM_BLANK_MINT, 1)
				default:
					goto(End)
			}
	}
	closemessage
	release
}

script DewfordTown_PokemonCenter_1F_EventScript_PreDamageNurse {
	lock
	msgbox(format("Would you like to Pre-Damage or Pre-Status one of your Pokémon?"))
	multichoice(10, 4, MULTI_PREDAMAGE, 0)
	if (var(VAR_RESULT) == 0) { // PreDamage
		special(ChoosePartyMon)
		waitstate
		specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
		if (var(VAR_RESULT) == SPECIES_EGG) {
			msgbox(format("A Pokémon Egg cannot be Pre-Damaged."))
			goto(End)
		}
		special(IsChosenMonFainted)
		if (var(VAR_RESULT) == TRUE) {
			msgbox(format("A Fainted Pokémon cannot be Pre-Damaged."))
			goto(End)
		} 
		call(Common_ShowSelectDamageScreen)
		waitstate
		specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
		playmoncry(0x8007, 0)
		waitmoncry
		msgbox(format("Set your {STR_VAR_1}'s HP to {STR_VAR_3}."))
	}
	elif (var(VAR_RESULT) == 1) { // PreStatus
		special(ChoosePartyMon)
		waitstate
		specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
		if (var(VAR_RESULT) == SPECIES_EGG) {
			msgbox(format("A Pokémon Egg cannot be Pre-Statused."))
			goto(End)
		}
		special(IsChosenMonFainted)
		if (var(VAR_RESULT) == TRUE) {
			msgbox(format("A Fainted Pokémon cannot be Pre-Statused."))
			goto(End)
		}
		msgbox(format("Which Status would you like to give the Pokémon?"))
		multichoicegrid(8, 4, MULTI_STATUSES, 2, 0)
		if (var(VAR_RESULT) == 0) {
			setvar(STATUS, 0)
		} elif (var(VAR_RESULT) == 1) {
			setvar(STATUS, 1)
		} elif (var(VAR_RESULT) == 2) {
			setvar(STATUS, 2)
		} elif (var(VAR_RESULT) == 3) {
			setvar(STATUS, 3)
		} elif (var(VAR_RESULT) == 4) {
			setvar(STATUS, 4)
		} elif (var(VAR_RESULT) == 5) {
			setvar(STATUS, 5)
		}
		switch (var(STATUS)) {
			case 0: // Poison
				special(IsChosenMonSteelType)
				if (var(VAR_RESULT) == TRUE) {
					getseenmon(757) // Salandit
					if (var(VAR_RESULT) == FALSE) {
						msgbox(format("Steel-type Pokémon cannot be Poisoned."))
						goto(End)
					}
				}
				special(IsChosenMonPoisonType)
				if (var(VAR_RESULT) == TRUE) {
					getseenmon(757) // Salandit
					if (var(VAR_RESULT) == FALSE) {
						msgbox(format("Poison-type Pokémon cannot be Poisoned."))
						goto(End)
					}					
				}
				setstatus1(STATUS1_POISON, VAR_0x8004)
				specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
				playmoncry(0x8007, 0)
				waitmoncry
				msgbox(format("Inflicted your {STR_VAR_1} with Poison."))
			case 1: // Paralysis
				special(IsChosenMonElectricType)
				if (var(VAR_RESULT) == TRUE) {
					msgbox(format("Electric-type Pokémon cannot be Paralyzed."))
					goto(End)
				}
				setstatus1(STATUS1_PARALYSIS, VAR_0x8004)
				specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
				playmoncry(0x8007, 0)
				waitmoncry
				msgbox(format("Inflicted your {STR_VAR_1} with Paralysis."))
			case 2: // Sleep
				special(IsChosenMonImmuneToSleepDueToAbility)
				if (var(VAR_RESULT) == TRUE) {
					specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
					msgbox(format("{STR_VAR_1}'s ability prevents it from being put to Sleep."))
					goto(End)
				}
				setstatus1(STATUS1_SLEEP_TURN(1), VAR_0x8004)
				specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
				playmoncry(0x8007, 0)
				waitmoncry
				msgbox(format("Inflicted your {STR_VAR_1} with Sleep."))
			case 3: // Burn
				special(IsChosenMonFireType)
				if (var(VAR_RESULT) == TRUE) {
					msgbox(format("Fire-type Pokémon cannot be Burned."))
					goto(End)
				}
				setstatus1(STATUS1_BURN, VAR_0x8004)
				specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
				playmoncry(0x8007, 0)
				waitmoncry
				msgbox(format("Inflicted your {STR_VAR_1} with Burn."))
			case 4: // Freeze
				special(IsChosenMonIceType)
				if (var(VAR_RESULT) == TRUE) {
					msgbox(format("Ice-type Pokémon cannot be Frozen."))
					goto(End)
				}
				setstatus1(STATUS1_FREEZE, VAR_0x8004)
				specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
				playmoncry(0x8007, 0)
				waitmoncry
				msgbox(format("Inflicted your {STR_VAR_1} with Freeze."))
			case 5: // Toxic
				special(IsChosenMonSteelType)
				if (var(VAR_RESULT) == TRUE) {
					getseenmon(757) // Salandit
					if (var(VAR_RESULT) == FALSE) {
						msgbox(format("Steel-type Pokémon cannot be Badly Poisoned."))
						goto(End)
					}
				}
				special(IsChosenMonPoisonType)
				if (var(VAR_RESULT) == TRUE) {
					getseenmon(757) // Salandit
					if (var(VAR_RESULT) == FALSE) {
						msgbox(format("Poison-type Pokémon cannot be Badly Poisoned."))
						goto(End)
					}
				}
				setstatus1(STATUS1_TOXIC_POISON, VAR_0x8004)
				specialvar(0x8007, GetSelectedMonNicknameAndSpecies)
				playmoncry(0x8007, 0)
				waitmoncry
				msgbox(format("Inflicted your {STR_VAR_1} with Toxic Poison."))
			default:

		}
	}
	End(global):
		closemessage
		release
}